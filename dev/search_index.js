var documenterSearchIndex = {"docs":
[{"location":"api/client/","page":"Client","title":"Client","text":"Solcast.Client\nSolcast.make_url\nSolcast.check_params\nSolcast.get_response","category":"page"},{"location":"api/client/#Solcast.Client","page":"Client","title":"Solcast.Client","text":"struct Client\n\nRepresents a client for making API requests.\n\nFields\n\nbase_url::String: The base URL for the API.\nendpoint::String: The API endpoint.\nuser_agent::String: The user agent string.\n\n\n\n\n\n","category":"type"},{"location":"api/client/#Solcast.make_url","page":"Client","title":"Solcast.make_url","text":"make_url(client::Client)\n\nGenerates the full URL based on the client's base URL and endpoint.\n\nArguments\n\nclient::Client: The API client.\n\nReturns\n\nurl::String: The full URL.\n\n\n\n\n\n","category":"function"},{"location":"api/client/#Solcast.check_params","page":"Client","title":"Solcast.check_params","text":"check_params(params::Dict)\n\nValidates and prepares the parameters for an API request.\n\nArguments\n\nparams::Dict: A dictionary of request parameters.\n\nReturns\n\nparams::Dict: The validated and modified request parameters.\nkey::String: The API key extracted from the parameters.\n\nThrows\n\nValueError: If validation fails or if the API key is missing or too short.\n\n\n\n\n\n","category":"function"},{"location":"api/client/#Solcast.get_response","page":"Client","title":"Solcast.get_response","text":"get_response(client::Client, params::Dict)\n\nSends an HTTP GET request and returns a Response object.\n\nArguments\n\nclient::Client: The API client.\nparams::Dict: A dictionary of request parameters.\n\nReturns\n\nresponse_object::Response: The HTTP response as a Response object.\n\n\n\n\n\n","category":"function"},{"location":"forecast/#Forecast","page":"Forecast","title":"Forecast","text":"","category":"section"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"Get irradiance, weather and power forecasts from the present time up to 14 days ahead for the requested location, derived from satellite (clouds and irradiance over non-polar continental areas, nowcasted for approx. four hours ahead) and numerical weather models (other data and longer horizons). More information in the API docs.","category":"page"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"The module Forecast has 3 available methods:","category":"page"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"Endpoint API Docs\nradiation_and_weather details\nrooftop_pv_power details\nadvanced_pv_power details","category":"page"},{"location":"forecast/#Example","page":"Forecast","title":"Example","text":"","category":"section"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"using Solcast: Forecast\n\nres = Forecast.radiation_and_weather(\n        -33.856784,\n        151.215297,\n        [\"air_temp\"]\n    )","category":"page"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"As a DataFrame.jl dataframe","category":"page"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"df = Forecast.to_dataframe(res)","category":"page"},{"location":"forecast/","page":"Forecast","title":"Forecast","text":"period_end air_temp\n2023-08-18 04:00:00+00:00 16\n2023-08-18 04:30:00+00:00 15\n2023-08-18 05:00:00+00:00 15\n2023-08-18 05:30:00+00:00 15\n2023-08-18 06:00:00+00:00 15","category":"page"},{"location":"tmy/#TMY","page":"Tmy","title":"TMY","text":"","category":"section"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"TMY (Typical Meteorological Year) is a collation of historical weather data for a specified location for a one year period. The dataset is derived from a multi-year time series specifically selected so that it presents the unique weather phenomena for the location, and provides annual averages that are consistent with long term averages. See the API docs The Tmy module has 2 methods:","category":"page"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"Endpoint API Docs\nradiation_and_weather details\nrooftop_pv_power details","category":"page"},{"location":"tmy/#Example","page":"Tmy","title":"Example","text":"","category":"section"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"using Solcast: Tmy\n\nres = Tmy.rooftop_pv_power(\n    -33.856784,\n    151.215297;\n    capacity=3\n)","category":"page"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"As a DataFrame.jl dataframe","category":"page"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"df = Tmy.to_dataframe(res)","category":"page"},{"location":"tmy/","page":"Tmy","title":"Tmy","text":"period_end pvpowerrooftop\n2059-01-01 01:00:00+00:00 1.461\n2059-01-01 02:00:00+00:00 0.974\n2059-01-01 03:00:00+00:00 0.731\n2059-01-01 04:00:00+00:00 0.4\n2059-01-01 05:00:00+00:00 0.231","category":"page"},{"location":"api/response/","page":"Response","title":"Response","text":"Solcast.Response\nSolcast.to_dict\nSolcast.to_dataframe","category":"page"},{"location":"api/response/#Solcast.Response","page":"Response","title":"Solcast.Response","text":"struct Response\n\nRepresents the response received from the Solcast API.\n\nFields\n\nstatus_code::Int64: The HTTP status code.\nurl::String: The URL of the response.\ndata::Union{Vector{UInt8}, Nothing}: The response data as bytes or Nothing if not available.\nsuccess::Bool: true if the request was successful, false otherwise.\nexception::Union{String, Nothing}: An exception message if the request failed, Nothing otherwise.\n\n\n\n\n\n","category":"type"},{"location":"api/response/#Solcast.to_dict","page":"Response","title":"Solcast.to_dict","text":"to_dict(response::Response)\n\nConverts the response data to a dictionary (JSON) if the response is successful.\n\nArguments\n\nresponse::Response: The HTTP response object.\n\nReturns\n\nparsed::Dict{String, Any}: The parsed JSON data.\n\nThrows\n\ninvalid_response_error: If the response is not successful.\n\n\n\n\n\n","category":"function"},{"location":"api/response/#Solcast.to_dataframe","page":"Response","title":"Solcast.to_dataframe","text":"to_dataframe(response::Response)\n\nConverts the response data to a DataFrame if the response is successful.\n\nArguments\n\nresponse::Response: The HTTP response object.\n\nReturns\n\ndfs::DataFrame: The DataFrame containing the response data.\n\nThrows\n\ninvalid_response_error: If the response is not successful.\n\n\n\n\n\n","category":"function"},{"location":"historic/#Historic","page":"Historic","title":"Historic","text":"","category":"section"},{"location":"historic/","page":"Historic","title":"Historic","text":"Historical irradiance, weather and power data, from 2007 to 7 days ago at 1-2km and 5 minutes resolution. For more information see the API Docs. The Historic module has 2 methods:","category":"page"},{"location":"historic/","page":"Historic","title":"Historic","text":"Endpoint API Docs\nradiation_and_weather list of API parameters\nrooftop_pv_power list of API parameters","category":"page"},{"location":"historic/#Example","page":"Historic","title":"Example","text":"","category":"section"},{"location":"historic/","page":"Historic","title":"Historic","text":"using Solcast: Historic\n\nres = Historic.radiation_and_weather(\n        -33.856784,\n        151.215297,\n        \"2022-10-25T14:45:00.000Z\";\n        output_parameters=[\"air_temp\"],\n        duration=\"P1D\"\n    )","category":"page"},{"location":"historic/","page":"Historic","title":"Historic","text":"As a DataFrame.jl dataframe","category":"page"},{"location":"historic/","page":"Historic","title":"Historic","text":"df = Historic.to_dataframe(res)","category":"page"},{"location":"historic/","page":"Historic","title":"Historic","text":"period_end air_temp dni ghi\n2022-06-01 06:30:00+00:00 13 441 78\n2022-06-01 07:00:00+00:00 13 62 12\n2022-06-01 07:30:00+00:00 13 0 0\n2022-06-01 08:00:00+00:00 12 0 0\n2022-06-01 08:30:00+00:00 12 0 0","category":"page"},{"location":"live/#Live","page":"Live","title":"Live","text":"","category":"section"},{"location":"live/","page":"Live","title":"Live","text":"Get irradiance weather and power estimated actuals for near real-time and past 7 days for the requested location, derived from satellite (clouds and irradiance over non-polar continental areas) and numerical weather models (other data). More information in the API Docs.","category":"page"},{"location":"live/","page":"Live","title":"Live","text":"The module Live has 3 available methods:","category":"page"},{"location":"live/","page":"Live","title":"Live","text":"Endpoint API Docs\nradiation_and_weather details\nrooftop_pv_power details\nadvanced_pv_power details","category":"page"},{"location":"live/#Example","page":"Live","title":"Example","text":"","category":"section"},{"location":"live/","page":"Live","title":"Live","text":"using Solcast: Live\n\nres = Live.radiation_and_weather(\n        -33.856784,\n        151.215297,\n        [\"dni\", \"ghi\"]\n    )","category":"page"},{"location":"live/","page":"Live","title":"Live","text":"As a DataFrame.jl dataframe","category":"page"},{"location":"live/","page":"Live","title":"Live","text":"df = Live.to_dataframe(res)","category":"page"},{"location":"live/","page":"Live","title":"Live","text":"period_end dni ghi\n2023-08-18 04:00:00+00:00 817 575\n2023-08-18 03:30:00+00:00 883 634\n2023-08-18 03:00:00+00:00 412 532\n2023-08-18 02:30:00+00:00 492 570\n2023-08-18 02:00:00+00:00 197 473","category":"page"},{"location":"#Welcome-to-Solcast","page":"Home","title":"Welcome to Solcast","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A simple Julia SDK that wraps Solcast's API.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From the directory, open Julia REPL and go to Package Management Mode by pressing ] and run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dev .","category":"page"},{"location":"","page":"Home","title":"Home","text":"OR","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install from Julia registry, open Julia REPL, go to Package Management Mode and run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add Solcast","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nTo access Solcast data you will need an API key. If you have the API key already, you can use it with this library either as an environment variable called SOLCAST_API_KEY, or you can pass it as an argument api_key when you call one of the library's methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fetching live radiation and weather data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Solcast: Live\n\nres = Live.radiation_and_weather(\n        -33.856784,\n        151.215297,\n        [\"air_temp\", \"dni\", \"ghi\"]\n    )","category":"page"},{"location":"","page":"Home","title":"Home","text":"As a DataFrame.jl dataframe","category":"page"},{"location":"","page":"Home","title":"Home","text":"df = Live.to_dataframe(res)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Available modules are","category":"page"},{"location":"","page":"Home","title":"Home","text":"Module API Docs\nLive Solcast.Live\nHistorical Solcast.Historical\nForecast Solcast.Forecast\nTmy Solcast.Tmy","category":"page"},{"location":"#Docs","page":"Home","title":"Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From the directory, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project=. docs/make.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Navigate to docs/build and run python -m http.server to start a local server on port 8000.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In a browser navigate to localhost:8000 to see the documentation.","category":"page"},{"location":"#Contributing-and-License","page":"Home","title":"Contributing & License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Any type of suggestion and code contribution is welcome as PRs and/or Issues. This repository is licensed under MIT (see LICENSE).","category":"page"}]
}
